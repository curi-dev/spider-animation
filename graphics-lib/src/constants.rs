
// FRONTAL LEG SIZES
pub const FRONTAL_UPPER_LEG_WIDTH: f32 = 25.;
pub const FRONTAL_UPPER_LEG_BIG_HEIGHT: f32 = 3.15;
pub const FRONTAL_UPPER_LEG_SMALL_HEIGHT: f32 = 2.5;

pub const FRONTAL_JOINT_LEG_WIDTH: f32 = FRONTAL_UPPER_LEG_WIDTH * 0.75; // 3 / 5
pub const FRONTAL_JOINT_LEG_BIG_HEIGHT: f32 = FRONTAL_UPPER_LEG_BIG_HEIGHT * 0.70;
pub const FRONTAL_JOINT_LEG_SMALL_HEIGHT: f32 = FRONTAL_UPPER_LEG_SMALL_HEIGHT * 0.75;

pub const FRONTAL_BOTTOM_LEG_WIDTH: f32 = FRONTAL_JOINT_LEG_WIDTH * 0.66; // change from 24.
pub const FRONTAL_BOTTOM_LEG_HEIGHT: f32 = FRONTAL_JOINT_LEG_BIG_HEIGHT * 0.60; // change from 6.

pub const FRONTAL_UPPER_LEG_DEPTH: f32 = 2.25;
pub const FRONTAL_JOINT_LEG_DEPTH: f32 = 1.;
pub const FRONTAL_BASE_LEG_DEPTH: f32 = 0.5;

pub const FRONTAL_LEG_INSET: f32 = 1.5;

// BACK LEG SIZES
pub const BACK_UPPER_LEG_WIDTH: f32 = 22.;
pub const BACK_UPPER_LEG_BIG_HEIGHT: f32 = 2.75;
pub const BACK_UPPER_LEG_SMALL_HEIGHT: f32 = 2.;

pub const BACK_JOINT_LEG_WIDTH: f32 = BACK_UPPER_LEG_WIDTH * 0.75; 
pub const BACK_JOINT_LEG_BIG_HEIGHT: f32 = BACK_UPPER_LEG_BIG_HEIGHT * 0.60;
pub const BACK_JOINT_LEG_SMALL_HEIGHT: f32 = BACK_UPPER_LEG_SMALL_HEIGHT * 0.75;

pub const BACK_BASE_LEG_WIDTH: f32 = BACK_JOINT_LEG_WIDTH * 0.66; 
pub const BACK_BASE_LEG_HEIGHT: f32 = BACK_JOINT_LEG_BIG_HEIGHT * 0.60; 

pub const BACK_UPPER_LEG_DEPTH: f32 = 2.25;
pub const BACK_JOINT_LEG_DEPTH: f32 = 1.;
pub const BACK_BASE_LEG_DEPTH: f32 = 0.5;


// MIDDLE LEG SIZES
pub const MIDDLE_UPPER_LEG_WIDTH: f32 = 20.;
pub const MIDDLE_UPPER_LEG_BIG_HEIGHT: f32 = 2.25;
pub const MIDDLE_UPPER_LEG_SMALL_HEIGHT: f32 = 1.5;

pub const MIDDLE_JOINT_LEG_WIDTH: f32 = MIDDLE_UPPER_LEG_WIDTH * 0.80; // 3 / 5
pub const MIDDLE_JOINT_LEG_BIG_HEIGHT: f32 = MIDDLE_UPPER_LEG_BIG_HEIGHT * 0.60;
pub const MIDDLE_JOINT_LEG_SMALL_HEIGHT: f32 = MIDDLE_UPPER_LEG_SMALL_HEIGHT * 0.75;

pub const MIDDLE_BASE_LEG_WIDTH: f32 = MIDDLE_JOINT_LEG_WIDTH * 0.66; // change from 24.
pub const MIDDLE_BASE_LEG_HEIGHT: f32 = MIDDLE_JOINT_LEG_BIG_HEIGHT * 0.60; // change from 6.

pub const MIDDLE_UPPER_LEG_DEPTH: f32 = 1.5;
pub const MIDDLE_JOINT_LEG_DEPTH: f32 = 1.;
pub const MIDDLE_BASE_LEG_DEPTH: f32 = 0.75;

// PERSPECTIVE CONFIGURATIONS
pub const DEFAULT_Z_NEAR: f32 = 5.;
pub const DEFAULT_Z_FAR: f32 = 600.;
pub const DEFAULT_FIELD_OF_VIEW_IN_RADIANS: f32 = 120.;
pub const INITIAL_BODY_DISPLACEMENT_X: f32 = 0.;
pub const INITIAL_BODY_DISPLACEMENT_Y: f32 = 0.;
pub const INITIAL_BODY_DISPLACEMENT_Z: f32 = -80.;

// BODY SIZES
pub const BODY_WIDTH: f32 = 14.;
pub const BODY_HEIGHT: f32 = 10.2;
pub const BODY_DEPTH: f32 = 14.;
pub const BODY_FRONTAL_WIDTH_OFFSET: f32 = 2.35;
pub const BODY_FRONTAL_DEPTH_OFFSET: f32 = BODY_DEPTH / 3.; 
pub const BODY_BACK_DEPTH_OFFSET: f32 = BODY_DEPTH / 2.; 
pub const BODY_BACK_WIDTH_OFFSET: f32 = 1.65;

// HEAD SIZES
pub const HEAD_WIDTH: f32 = 2.5;
pub const HEAD_HEIGHT: f32 = 5.5;
pub const HEAD_DEPTH: f32 = BODY_DEPTH / 3.;
pub const HEAD_FRONTAL_WIDTH_OFFSET: f32 = 0.75;
pub const HEAD_BACK_DEPTH_OFFSET: f32 = HEAD_DEPTH / 2.; 
pub const HEAD_BACK_WIDTH_OFFSET: f32 = 2.5;


pub fn get_frontal_body_convergent_angle() -> f32 {
    let theta_tan = (BODY_FRONTAL_WIDTH_OFFSET / BODY_FRONTAL_DEPTH_OFFSET) as f64;
    
    theta_tan.atan() as f32
}

pub fn get_back_body_convergent_angle() -> f32 {
    let theta_tan = (BODY_BACK_WIDTH_OFFSET / BODY_BACK_DEPTH_OFFSET) as f64;
    
    theta_tan.atan() as f32
}

// 



